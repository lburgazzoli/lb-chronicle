dependencies {
    compile "net.openhft:chronicle:$versions.openhftChronicleQueue"
    compile("org.slf4j:slf4j-simple:$versions.slf4j") { transitive = false }
}

ext {
    tmpdir   = System.getProperty('java.io.tmpdir')
    dataPath = "${tmpdir}/chronicle-data"
}

// *****************************************************************************
// TASKS
// *****************************************************************************

task reader(type: JavaExec) {
    group     = 'chronicle'
    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.ChronicleQueueReader'
    classpath = sourceSets.main.runtimeClasspath
    args      = [ dataPath ]
}

task writer(type: JavaExec) {
    group     = 'chronicle'
    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.ChronicleQueueWriter'
    classpath = sourceSets.main.runtimeClasspath
    args      = [ dataPath ]
}

task remoteAppender(type: JavaExec) {
    group     = 'chronicle'
    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.RemoteAppender'
    classpath = sourceSets.main.runtimeClasspath
    args      = [ dataPath ]
}

// *****************************************************************************
//
// *****************************************************************************

task profileGarbageOnWindowsWithJFR(type: JavaExec) {
    group = 'chronicle'

    def jfrOptsMap = [
        'duration' : "${60 * 5}s",
        'name'     : 'ChronicleQueue',
        'settings' : 'profile',
        'filename' : './garbageOnWindows.jfr'
    ]

    def jfrOpts = jfrOptsMap.collect {k,v -> "$k=$v"}.join(',')

    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.GarbageOnWindows'
    classpath = sourceSets.main.runtimeClasspath 

    jvmArgs = [
        //"-Xbootclasspath/p:$projectDir/windows",
        "-XX:AutoBoxCacheMax=20000",
        "-XX:+UnlockCommercialFeatures",
        "-XX:+UnlockDiagnosticVMOptions",
        "-XX:+DebugNonSafepoints",
        "-XX:+FlightRecorder",
        "-XX:StartFlightRecording=${jfrOpts}", 
        "-Ddata.path=${dataPath}", 
        "-Diterations=2000"
    ]
}

task profileGarbageOnWindowsWithYJP(type: JavaExec) {
    group = 'chronicle'

    def yjpOptsMap = [
        'delay'          : '2000', 
        'alloceach'      : '10',
        'allocsizelimit' : '4096'
    ]

    def yjpPath  = System.getenv('YJP_AGENT_PATH')
    def yjpOpts  = yjpOptsMap.collect {k,v -> "$k=$v"}.join(',')

    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.GarbageOnWindows'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs   = [ "-agentpath:${yjpPath}=${yjpOpts}", "-Ddata.path=${dataPath}", "-Diterations=2000" ]
}

task garbageOnWindows(type: JavaExec) {
    group = 'chronicle'

    main      = 'com.github.lburgazzoli.openhft.examples.chronicle.queue.GarbageOnWindows'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs   = [ "-XX:+UnlockCommercialFeatures", "-Ddata.path=${dataPath}", "-Diterations=10000" ]
}